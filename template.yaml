AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Amazon Aurora Serverless DB cluster. **WARNING** This template creates an Amazon Aurora DB cluster.
  You will be billed for the AWS resources used if you create a stack from this template.

Parameters:
  Tag:
    Description: We tag all AWS resources for your convinience.
    Type: String

  VPC:
    Description: Choose which VPC should we use.
    Type: AWS::EC2::VPC::Id

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>

  ComputeSecurityGroup:
    Description: Select the Compute Security Group
    Type: AWS::EC2::SecurityGroup::Id

  EngineMode:
    Type: String
    Default: serverless
    AllowedValues:
      - serverless
      - provisioned

  # aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"
  # aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"
  Engine:
    Type: String
    AllowedValues: [ aurora-mysql, aurora-postgresql ]

Conditions:
  MySQL:
    Fn::Equals: [!Ref Engine, aurora-mysql]
  SERVERLESS:
    Fn::Equals: [!Ref EngineMode, serverless]
  PROVISIONED:
    Fn::Equals: [!Ref EngineMode, provisioned]

Mappings:
  Configuration:
    Logs:
      RetentionInDays: 30

Resources:
  DBCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret for Aurora
      GenerateSecretString:
        SecretStringTemplate:
          Fn::If:
             - MySQL
             - |
                {"username": "admin"}
             - |
                {"username": "postgres"}
        GenerateStringKey: password
        PasswordLength: 16
        ExcludePunctuation: true
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Ref AWS::StackName
      SubnetIds: !Ref PrivateSubnets
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${Tag} Aurora Security Group
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}-on-aws-aurora

  DBClusterParameterGroup:
    Condition: MySQL
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Aurora(MySQL 5.7) enable audit log
      Family: aurora-mysql5.7
      Parameters:
        server_audit_logging: 1
        server_audit_events: Connect,Query,Query_DCL,Query_DDL,Query_DML,Table
        server_audit_excl_users: rdsadmin

  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBCredentials, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBCredentials, ':SecretString:password}}' ]]
      Engine: !Ref Engine
      DBClusterParameterGroupName:  !If
        - MySQL
        - !Ref DBClusterParameterGroup
        - !Ref AWS::NoValue
      EngineVersion: !If
        - MySQL
        - 5.7.mysql_aurora.2.10.0
        - 10.14
      EngineMode: !Ref EngineMode
      ScalingConfiguration: !If
        - SERVERLESS
        - AutoPause: true
          MinCapacity: 2
          MaxCapacity: 4
          SecondsUntilAutoPause: 300
        - !Ref AWS::NoValue
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
      EnableCloudwatchLogsExports: !If
        - PROVISIONED
        - - !If
            - MySQL
            - audit
            - postgresql
        - !Ref AWS::NoValue
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}-on-aws-aurora
        
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 
        - /aws/rds/cluster/${RDSCluster}/${Log}
        -
          Log: !If
            - MySQL
            - audit
            - postgresql
      RetentionInDays: !FindInMap [Configuration, Logs, RetentionInDays]

  RDSDBInstance1:
    Type: AWS::RDS::DBInstance
    Condition: PROVISIONED
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: db.t3.medium
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: !Ref Engine
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}-on-aws-aurora

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBCredentials
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster

Outputs:
  DBSecretId:
    Value: !Ref DBCredentials

  SecurityGroup:
    Value: !Ref SecurityGroup

  Endpoint:
    Value: !GetAtt RDSCluster.Endpoint.Address
